const diffType={mechanical:{id:"edit",ins:"INS",del:"DEL"},structural:{id:"structural",punctuation:"PUNCTUATION",textInsert:"TEXTINSERT",textDelete:"TEXTDELETE",wordchange:"WORDCHANGE",textReplace:"TEXTREPLACE",insert:"INSERT",delete:"DELETE",move:"MOVE",noop:"NOOP",wrap:"WRAP",unwrap:"UNWRAP"},semantic:{id:"semantic"},newTextId:"new",oldTextId:"old"},algorithms={diffMatchPatch:"diff_match_patch"},regexp={punctuation:"^\\W[\\s]?[A-z]?$",wordchange:"^\\S*$",tagSelector:"<[.A-z]?[^(><.)]+>",unclosedTagSelector:"<[.A-z]?[^(><.)]+",unopenedTagSelector:"[.A-z]?[^(><.)]+>",textSelector:"[A-z\\s]*",lowercaseLetter:"[a-z]+",tagElements:"[<>/?]"},TBD="TBD",globalUser="SAURON";class DiffAlgorithmSelector{constructor(t,e,s){let n;switch(s){case algorithms.diffMatchPatch:n=new DiffMatchPatchAdapter(t,e);break;default:n=null}return n}}class Adapter{constructor(t,e){this.oldText=t,this.newText=e}makeDiff(t){this.threeDiff=new ThreeDiff(t,this.oldText,this.newText)}getMechanicalOperations(){return this.threeDiff.getMechanicalOperations()}getStructuralOperations(){return this.threeDiff.getStructuralOperations()}}class DiffMatchPatchAdapter extends Adapter{constructor(t,e){super(t,e);let s=new diff_match_patch;this.diffs=s.diff_main(t,e),s.diff_cleanupSemantic(this.diffs),this.patches=s.patch_make(this.diffs),this.runDiffAlgorithm()}runDiffAlgorithm(){this.makeDiff(this._getMechanicalOps())}_getMechanicalOps(){let t=[];for(let e of this.patches){let s=e.start1,n=e.diffs;n.map((e,i)=>{if(i>0){let t=n[i-1];-1!==t[0]&&(s+=parseInt(t[1].length))}if(0!==e[0]){let n=1===e[0]?diffType.mechanical.ins:diffType.mechanical.del;t.push(new MechanicalDiff(n,e[1],s,t.length))}})}return t}}class Diff{constructor(t,e){this.id=this._setId(t,e)}_setId(t,e){let s=`${t}-`,n=4-(++e).toString().length;for(;n>0;)s+="0",n--;return s+e}getText(t,e){return e}}class MechanicalDiff extends Diff{constructor(t,e,s,n){super(diffType.mechanical.id,n),this.op=t,this.content=e,this.pos=s}getWord(t){let e=t.substring(0,this.pos),s=t.substring(this.op===diffType.mechanical.ins?this.pos+this.content.length:this.pos,t.length);return e=e.split(/\s/)[e.split(/\s/).length-1],s=s.split(/\s/)[0],this.op===diffType.mechanical.ins&&(e+=this.content),e+s}getTag(t,e){let s=t.split(this.content),n=e.split(this.content),i={diff:this};return s.length>1?(i.left=s[0],i.right=s[1]):(i.left=n[0],i.right=n[1]),console.log(RegExp(regexp.unclosedTagSelector,"g").exec(i.left)),i}}class StructuralDiff extends Diff{constructor(t,e,s=globalUser){super(diffType.structural.id,t),this.op=TBD,this.by=s,this.timestamp=Date.now(),this.items=[e]}setOperation(t){this.op=t}addItem(t){this.items.push(t)}}class ThreeDiff{constructor(t,e,s){this.listMechanicalOperations=t,this.listStructuralOperations=[],this.listSemanticOperations=[],this.oldText=e,this.newText=s,this.structuralRules=[(t,e=null)=>null!==e&&(e.content.trim()===t.content.trim()&&e.pos!==t.pos&&t.op!==e.op&&diffType.structural.move),(t,e=null)=>{if(null===e)return!1;if(!RegExp(regexp.tagSelector).test(t.content)&&!RegExp(regexp.tagSelector).test(e.content)&&t.op===e.op)return!1;if(t.content.replace(RegExp(regexp.tagElements,"g"),"")!==e.content.replace(RegExp(regexp.tagElements,"g"),""))return!1;let s=t.op===diffType.mechanical.ins?this.newText:this.oldText,n=Math.min(t.pos+t.content.length,e.pos+e.content.length),i=Math.max(t.pos,e.pos);s.substring(n,i);return t.op===diffType.mechanical.ins?diffType.structural.wrap:diffType.structural.unwrap},(t,e=null)=>{if(null===e)return!1;let s=t.getTag(this.newText,this.oldText),n=e.getTag(this.newText,this.oldText),i=s.left+s.diff.content+n.right,r=n.left+n.diff.content+n.right;return!(!RegExp(regexp.tagSelector).test(i)||!RegExp(regexp.tagSelector).test(r))&&(s.left===n.left&&s.right===n.right&&diffType.structural.noop)},(t,e=null)=>{if(null!==e)return!1;if(!RegExp(regexp.tagSelector).test(t.content))return!1;let s,n=[],i=RegExp(regexp.tagSelector,"g");for(;null!==(s=i.exec(t.content));)n.push(s[0]);if(n.length%2!=0)return!1;let r=n[0].replace(RegExp(regexp.tagElements,"g"),""),l=n[n.length-1].replace(RegExp(regexp.tagElements,"g"),"");if(r.split(/\s/)[0]!==l)return!1;let o=t.op===diffType.mechanical.ins?diffType.structural.insert:diffType.structural.delete;return!!RegExp(`^${regexp.textSelector}<${r}>.*</${l}>${regexp.textSelector}$`).test(t.content)&&o},(t,e=null)=>null!==e&&((!RegExp(regexp.tagSelector).test(t)||!RegExp(regexp.tagSelector).test(t))&&(!(!RegExp(regexp.punctuation).test(t.content)||!RegExp(regexp.punctuation).test(e.content)||t.pos!==e.pos||t.op===e.op)&&diffType.structural.punctuation)),(t,e=null)=>!1,(t,e=null)=>null!==e&&(t.content!==e.content&&t.pos===e.pos&&t.op!==e.op&&diffType.structural.textReplace),(t,e=null)=>{let s=t.getWord(this.newText);if(RegExp(regexp.tagSelector).test(t.content))return!1;if(null!=e){if(RegExp(regexp.tagSelector).test(e.content))return!1;let t=e.getWord(this.newText);return!(""===s||""===t||!RegExp(regexp.wordchange).test(s)||!RegExp(regexp.wordchange).test(t)||s!==t)&&diffType.structural.wordchange}return!(""===s||!RegExp(regexp.wordchange).test(s))&&diffType.structural.wordchange},(t,e=null)=>null===e&&(t.op===diffType.mechanical.ins?diffType.structural.textInsert:diffType.structural.textDelete)],this._executeStructuralAnalysis()}_executeStructuralAnalysis(){let t=this.listMechanicalOperations.slice(0);for(;t.length>0;){let e=!1,s=t.splice(0,1)[0],n=new StructuralDiff(this.listStructuralOperations.length,s);for(let i=0;i<t.length;i++){let r=t[i];for(let l of this.structuralRules){let o=l(s,r);if(this._checkRuleResulCorrectness(o)){n.setOperation(o),n.addItem(t.splice(i,1)[0]),e=!0,i--;break}}}if(!e)for(let t of this.structuralRules){let e=t(s);if(this._checkRuleResulCorrectness(e)){n.setOperation(e);break}}this.listStructuralOperations.push(n)}this._setOldsNews()}_setOldsNews(){for(let t of this.listStructuralOperations){let e=t.items,s=this._getContextBoundariesNew(this.newText,e[0],e[e.length-1]),n=s.leftContext;e.map((t,s)=>{let i=e[s+1];t.op===diffType.mechanical.ins?(n+=t.content,void 0!==i&&(n+=this.newText.substring(t.pos+t.content.length,i.pos))):void 0!==i&&(n+=this.newText.substring(t.pos,i.pos))}),n+=s.rightContext;let i=this._getContextBoundariesOld(this.oldText,e[0],e[e.length-1]).leftContext;e.map((t,s)=>{let n=e[s+1];t.op===diffType.mechanical.ins?void 0!==n&&(i+=this.oldText.substring(t.pos,n.pos-t.content.length)):(i+=t.content,void 0!==n&&(i+=this.oldText.substring(t.pos+t.content.length,n.pos+t.content.length)))}),i+=s.rightContext,t.new=n,t.old=i}}_getContextBoundariesNew(t,e,s){const n=e.pos,i=s.pos+(s.op===diffType.mechanical.ins?s.content.length:0),r=n<10?0:10,l=i+10<t.length?i+10:t.length;let o=t.substring(r,n).split(/\s/),c=t.substring(i,l).split(/\s/);return{leftContext:o[o.length-1],rightContext:c[0]}}_getContextBoundariesOld(t,e,s){const n=e.pos,i=s.pos+(s.op===diffType.mechanical.del?s.content.length:0),r=n<10?0:10,l=i+10<t.length?i+10:t.length;let o=t.substring(r,n).split(/\s/),c=t.substring(i,l).split(/\s/);return{leftContext:o[o.length-1],rightContext:c[0]}}_checkRuleResulCorrectness(t){return!1!==t&&(null!==t&&void 0!==t)}getMechanicalOperations(){return this.listMechanicalOperations}getStructuralOperations(){return this.listStructuralOperations}}