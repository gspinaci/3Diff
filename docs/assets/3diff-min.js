const diffType={mechanical:{id:"edit",ins:"INS",del:"DEL"},structural:{id:"structural",punctuation:"PUNCTUATION",textInsert:"TEXTINSERT",textDelete:"TEXTDELETE",wordchange:"WORDCHANGE",textReplace:"TEXTREPLACE",insert:"INSERT",delete:"DELETE",move:"MOVE"},semantic:{id:"semantic"},newTextId:"new",oldTextId:"old"},algorithms={diffMatchPatch:"diff_match_patch"},regexp={punctuation:"^\\W[\\s]?[A-z]?$",wordchange:"^\\S*$",tagSelector:"<[.A-z]?[^(><.)]+>",textSelector:"[A-z\\s]*",lowercaseLetter:"[a-z]+",tagElements:"[<>/?]"},TBD="TBD",globalUser="SAURON";class DiffAlgorithmSelector{constructor(t,e,s){let i;switch(s){case algorithms.diffMatchPatch:i=new DiffMatchPatchAdapter(t,e);break;default:i=null}return i}}class Adapter{constructor(t,e){this.oldText=t,this.newText=e}makeDiff(t){this.threeDiff=new ThreeDiff(t,this.oldText,this.newText)}getMechanicalOperations(){return this.threeDiff.getMechanicalOperations()}getStructuralOperations(){return this.threeDiff.getStructuralOperations()}}class DiffMatchPatchAdapter extends Adapter{constructor(t,e){super(t,e);let s=new diff_match_patch;this.diffs=s.diff_main(t,e),s.diff_cleanupSemantic(this.diffs),this.patches=s.patch_make(this.diffs),this.runDiffAlgorithm()}runDiffAlgorithm(){this.makeDiff(this._getMechanicalOps())}_getMechanicalOps(){let t=[];for(let e of this.patches){let s=e.start1,i=e.diffs;i.map((e,r)=>{if(r>0){let t=i[r-1];-1!==t[0]&&(s+=parseInt(t[1].length))}if(0!==e[0]){let i=1===e[0]?diffType.mechanical.ins:diffType.mechanical.del;t.push(new MechanicalDiff(i,e[1],s,t.length))}})}return t}}class Diff{constructor(t,e){this.id=this._setId(t,e)}_setId(t,e){let s=`${t}-`,i=4-(++e).toString().length;for(;i>0;)s+="0",i--;return s+e}_getContext(t){let e=t.substring(0,this.pos),s=t.substring(this.op===diffType.mechanical.ins?this.pos+this.content.length:this.pos,t.length);return e=e.split(/\s/)[e.split(/\s/).length-1],s=s.split(/\s/)[0],this.op===diffType.mechanical.ins&&(e+=this.content),e+s}}class MechanicalDiff extends Diff{constructor(t,e,s,i){super(diffType.mechanical.id,i),this.op=t,this.content=e,this.pos=s}}class StructuralDiff extends Diff{constructor(t,e,s=globalUser){super(diffType.structural.id,t),this.op=TBD,this.by=s,this.timestamp=Date.now(),this.items=[e]}setOperation(t){this.op=t}addItem(t){this.items.push(t)}}class ThreeDiff{constructor(t,e,s){this.listMechanicalOperations=t,this.listStructuralOperations=[],this.listSemanticOperations=[],this.oldText=e,this.newText=s,this.structuralRules=[(t,e=null)=>!1,(t,e=null)=>{if(null!==e)return!1;if(!RegExp(regexp.tagSelector).test(t.content))return!1;let s,i=[],r=RegExp(regexp.tagSelector,"g");for(;null!==(s=r.exec(t.content));)i.push(s[0]);if(i.length%2!=0)return!1;let l=i[0].replace(RegExp(regexp.tagElements,"g"),""),n=i[i.length-1].replace(RegExp(regexp.tagElements,"g"),"");if(l.split(/\s/)[0]!==n)return!1;let a=t.op===diffType.mechanical.ins?diffType.structural.insert:diffType.structural.delete;return!!RegExp(`^${regexp.textSelector}<${l}>.*</${n}>${regexp.textSelector}$`).test(t.content)&&a},(t,e=null)=>null!==e&&((!RegExp(regexp.tagSelector).test(t)||!RegExp(regexp.tagSelector).test(t))&&(!(!RegExp(regexp.punctuation).test(t.content)||!RegExp(regexp.punctuation).test(e.content)||t.pos!==e.pos||t.op===e.op)&&diffType.structural.punctuation)),(t,e=null)=>{let s=t._getContext(this.newText);if(RegExp(regexp.tagSelector).test(t.content))return!1;if(null!=e){if(RegExp(regexp.tagSelector).test(e.content))return!1;let t=e._getContext(this.newText);return!(""===s||""===t||!RegExp(regexp.wordchange).test(s)||!RegExp(regexp.wordchange).test(t)||s!==t)&&diffType.structural.wordchange}return!(""===s||!RegExp(regexp.wordchange).test(s))&&diffType.structural.wordchange},(t,e=null)=>!1,(t,e=null)=>null!==e&&(t.content!==e.content&&t.pos===e.pos&&t.op!==e.op&&diffType.structural.textReplace),(t,e=null)=>null===e&&(t.op===diffType.mechanical.ins?diffType.structural.textInsert:diffType.structural.textDelete)],this._executeStructuralAnalysis()}_executeStructuralAnalysis(){let t=this.listMechanicalOperations.slice(0);for(;t.length>0;){let e=!1,s=t.splice(0,1)[0],i=new StructuralDiff(this.listStructuralOperations.length,s);for(let r=0;r<t.length;r++){let l=t[r];for(let n of this.structuralRules){let a=n(s,l);if(!1!==a){i.setOperation(a),i.addItem(t.splice(r,1)[0]),e=!0,r--;break}}}if(!e)for(let t of this.structuralRules){let e=t(s);if(!1!==e){i.setOperation(e);break}}this.listStructuralOperations.push(i)}}getMechanicalOperations(){return this.listMechanicalOperations}getStructuralOperations(){return this.listStructuralOperations}}