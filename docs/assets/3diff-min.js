const diffType={mechanical:{id:"edit",ins:"INS",del:"DEL"},structural:{id:"structural",punctuation:"PUNCTUATION",textInsert:"TEXTINSERT",textDelete:"TEXTDELETE",wordchange:"WORDCHANGE"},semantic:{id:"semantic"},newTextId:"new",oldTextId:"old"},algorithms={diffMatchPatch:"diff_match_patch"},regexp={punctuation:/^\W[\s]?[A-z]?$/,wordchange:/^\S*$/},TBD="TBD",globalUser="Gianmarco Spinaci";class DiffAlgorithmSelector{constructor(t,e,i){let s;switch(i){case algorithms.diffMatchPatch:s=new DiffMatchPatchAdapter(t,e);break;default:s=null}return s}}class Adapter{constructor(t,e){this.oldText=t,this.newText=e}makeDiff(t){this.threeDiff=new ThreeDiff(t,this.oldText,this.newText)}getMechanicalOperations(){return this.threeDiff.getMechanicalOperations()}getStructuralOperations(){return this.threeDiff.getStructuralOperations()}}class DiffMatchPatchAdapter extends Adapter{constructor(t,e){super(t,e);let i=new diff_match_patch;this.diffs=i.diff_main(t,e),i.diff_cleanupSemantic(this.diffs),this.patches=i.patch_make(this.diffs),this.runDiffAlgorithm()}runDiffAlgorithm(){this.makeDiff(this._getMechanicalOps())}_getMechanicalOps(){let t=[];for(let e of this.patches){let i=e.start1,s=e.diffs;s.map((e,a)=>{if(a>0){let t=s[a-1];-1!==t[0]&&(i+=parseInt(t[1].length))}if(0!==e[0]){let s=1===e[0]?diffType.mechanical.ins:diffType.mechanical.del;t.push(new MechanicalDiff(s,e[1],i,t.length))}})}return t}}class Diff{constructor(t,e){this.id=this._setId(t,e)}_setId(t,e){let i=`${t}-`,s=4-(++e).toString().length;for(;s>0;)i+="0",s--;return i+e}_getContext(t){let e=t.substring(0,this.pos),i=t.substring(this.op===diffType.mechanical.ins?this.pos+this.content.length:this.pos,t.length);return e=e.split(/\s/)[e.split(/\s/).length-1],i=i.split(/\s/)[0],e+this.content+i}}class MechanicalDiff extends Diff{constructor(t,e,i,s){super(diffType.mechanical.id,s),this.op=t,this.content=e,this.pos=i}}class StructuralDiff extends Diff{constructor(t,e,i=globalUser){super(diffType.structural.id,t),this.op=TBD,this.by=i,this.timestamp=Date.now(),this.items=[e]}setOperation(t){this.op=t}addItem(t){this.items.push(t)}}class ThreeDiff{constructor(t,e,i){this.listMechanicalOperations=t,this.listStructuralOperations=[],this.listSemanticOperations=[],this.oldText=e,this.newText=i,this.structuralRules=[(t,e=null)=>null!==e&&(!(!RegExp(regexp.punctuation).test(t.content)||!RegExp(regexp.punctuation).test(e.content)||t.pos!==e.pos||t.op===e.op)&&diffType.structural.punctuation),(t,e=null)=>null===e&&(t.op===diffType.mechanical.ins?diffType.structural.textInsert:diffType.structural.textDelete)],this._executeStructuralAnalysis()}_executeStructuralAnalysis(){let t=this.listMechanicalOperations.slice(0);for(;t.length>0;){let e=!1,i=t.splice(0,1)[0],s=new StructuralDiff(this.listStructuralOperations.length,i);for(let a=0;a<t.length;a++){let r=t[a];for(let n of this.structuralRules){let l=n(i,r);if(!1!==l){s.setOperation(l),s.addItem(t.splice(a,1)[0]),e=!0,a--;break}}}if(!e)for(let t of this.structuralRules){let e=t(i);if(!1!==e){s.setOperation(e);break}}this.listStructuralOperations.push(s)}}getMechanicalOperations(){return this.listMechanicalOperations}getStructuralOperations(){return this.listStructuralOperations}}