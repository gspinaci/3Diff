const diffType={mechanical:{id:"edit",ins:"INS",del:"DEL"},structural:{id:"structural",punctuation:"PUNCTUATION",textInsert:"TEXTINSERT",textDelete:"TEXTDELETE"},semantic:{id:"semantic"}},algorithms={diffMatchPatch:"diff_match_patch"},regexp={punctuation:/^\W[\s]?[A-z]?$/},TBD="TBD",globalUser="Gianmarco Spinaci";class DiffAlgorithmSelector{constructor(t,e,i){let s;switch(i){case algorithms.diffMatchPatch:s=new DiffMatchPatchAdapter(t,e);break;default:s=null}return s}}class Adapter{constructor(t,e){this.oldText=t,this.newText=e}makeDiff(t){this.threeDiff=new ThreeDiff(t,this.oldText,this.newText)}getMechanicalOperations(){return this.threeDiff.getMechanicalOperations()}getStructuralOperations(){return this.threeDiff.getStructuralOperations()}}class DiffMatchPatchAdapter extends Adapter{constructor(t,e){super(t,e);let i=new diff_match_patch;this.diffs=i.diff_main(t,e),i.diff_cleanupSemantic(this.diffs),this.patches=i.patch_make(this.diffs),this.runDiffAlgorithm()}runDiffAlgorithm(){this.makeDiff(this._getMechanicalOps())}_getMechanicalOps(){let t=[];for(let e of this.patches){let i=e.start1;e.diffs.map((s,r)=>{if(r>0){let t=e.diffs[r-1];-1!==t[0]&&(i+=parseInt(t[1].length))}if(0!==s[0]){let e=1===s[0]?diffType.mechanical.ins:diffType.mechanical.del;t.push(new MechanicalDiff(e,s[1],i,t.length))}})}return t}}class ThreeDiff{constructor(t,e,i){this.listMechanicalOperations=t,this.listStructuralOperations=[],this.listSemanticOperations=[],this.oldText=e,this.newText=i,this.structuralRules=[(t,e)=>!(!RegExp(regexp.punctuation).test(t.content)||!RegExp(regexp.punctuation).test(e.content)||t.pos!==e.pos||t.op===e.op)&&new StructuralDiff(diffType.structural.punctuation,[t,e],this.listStructuralOperations.length),(t,e=null)=>null===e&&new StructuralDiff(t.op===diffType.mechanical.ins?diffType.structural.textInsert:diffType.structural.textDelete,[t],this.listStructuralOperations.length)],this._executeStructuralAnalysis()}_executeStructuralAnalysis(){let t=this.listMechanicalOperations.slice(0);for(;t.length>0;){let e=!1,i=t.splice(0,1)[0];t:for(let s=0;s<t.length;s++){let r=t[s];for(let a of this.structuralRules){let c=a(i,r);if(!1!==c){t.splice(s,1),this.listStructuralOperations.push(c),e=!0;break t}}}e||this.listStructuralOperations.push(this.structuralRules[this.structuralRules.length-1](i))}}getMechanicalOperations(){return this.listMechanicalOperations}getStructuralOperations(){return this.listStructuralOperations}}class Diff{constructor(t,e,i){this.op=t,this.id=this._setId(e,i)}_setId(t,e){let i=`${t}-`,s=4-(++e).toString().length;for(;s>0;)i+="0",s--;return i+e}}class MechanicalDiff extends Diff{constructor(t,e,i,s){super(t,diffType.mechanical.id,s),this.content=e,this.pos=i}}class StructuralDiff extends Diff{constructor(t,e,i,s=TBD,r=TBD,a=globalUser){super(t,diffType.structural.id,i),this.by=a,this.timestamp=Date.now(),this.items=e,this.old=s,this.new=r}}